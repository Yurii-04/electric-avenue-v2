name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  server:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server

    steps:
      - name: Checkout backend code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install backend dependencies
        run: yarn install --frozen-lockfile

      - name: Run backend tests
        run: yarn test --passWithNoTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend Docker image (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: ./server
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend:latest
          platforms: linux/amd64,linux/arm64

  client:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client

    steps:
      - name: Checkout client code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install client dependencies
        run: yarn install --frozen-lockfile

      - name: Run client tests
        run: yarn test --passWithNoTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push frontend Docker image (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: ./client
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/frontend:latest
          platforms: linux/amd64,linux/arm64

  deploy:
    needs: [server, client]
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd ~/electric-avenue
            docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/frontend:latest
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans
